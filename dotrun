#! /usr/bin/env python3

# Standard library
import argparse

# Local modules
from canonicalwebteam.dotrun import commands

# Parse arguments
parser = argparse.ArgumentParser(
    description="Run commands from this directory"
)
parser.add_argument(
    "-C", "--directory", help="The directory in which to run commands"
)
parser.add_argument(
    "-i",
    "--force-install",
    action="store_true",
    default=False,
    help="Force `poetry install` and `yarn install` to run",
)
parser.add_argument(
    "-s",
    "--skip-install",
    action="store_true",
    default=False,
    help="Don't check for poetry or yarn dependencies before running",
)
parser.add_argument(
    "--env",
    action="append",
    default=[],
    help="Environment variables to use when running package.json commands",
)

# Commands
subparsers = parser.add_subparsers(description="Commands: serve, watch etc.")
subparsers.required = True
subparsers.dest = 'command'

clean_parser = subparsers.add_parser(
    "clean",
    help=(
        "Run `yarn run clean` in the project environment, "
        "and forget about this project"
    ),
)
clean_parser.set_defaults(func=commands.version)

list_parser = subparsers.add_parser("list", help="List active projects")
list_parser.set_defaults(func=commands.list_projects)

install_parser = subparsers.add_parser(
    "install", help="Install dependencies with yarn and poetry"
)
install_parser.set_defaults(func=commands.install)

serve_parser = subparsers.add_parser(
    "serve", help="Run `yarn run serv` inside the project environment"
)
serve_parser.add_argument(
    "--watch",
    action="store_true",
    default=False,
    help="Run `yarn run watch` alongside `serve`",
)
serve_parser.set_defaults(func=commands.serve)

build_parser = subparsers.add_parser(
    "build", help="Run `yarn run build` inside the project environment"
)
build_parser.set_defaults(func=commands.build)

test_parser = subparsers.add_parser(
    "test", help="Run `yarn run test` in the project environment"
)
test_parser.set_defaults(func=commands.test)

version_parser = subparsers.add_parser(
    "clean", help="Print the installed dotrun version"
)
version_parser.set_defaults(func=commands.clean)


exec_parser = subparsers.add_parser(
    "exec", help="Execute a command in the project environment"
)
exec_parser.set_defaults(func=commands.exec_command)

yarn_parser = subparsers.add_parser(
    "yarn", help="Run `yarn {command}` in the project environment"
)
yarn_parser.add_argument("remainader", nargs=argparse.REMAINDER)
yarn_parser.set_defaults(func=commands.list_projects)

poetry_parser = subparsers.add_parser(
    "poetry", help="Run `poetry {command}` in the project environment"
)
poetry_parser.add_argument("remainader", nargs=argparse.REMAINDER)
poetry_parser.set_defaults(func=commands.list_projects)

args = parser.parse_args()
args.func(vars(args))
